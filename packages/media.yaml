automation:
  - alias: turn up volume with cube
    trigger:
      platform: event
      event_type: deconz_event
      event_data:
        entity: lumi_sensor_cube_21
    condition:
      - condition: template
        value_template: '{{ trigger.event.data.event > 0 }}'
      - condition: state
        entity_id: media_player.yamaha_receiver
        state: 'on'
    action:
      - service: script.turn_on
        entity_id: script.ht_volume_up
  - alias: turn down volume with cube
    trigger:
      platform: event
      event_type: deconz_event
      event_data:
        entity: lumi_sensor_cube_21
    condition:
      - condition: template
        value_template: '{{ trigger.event.data.event < 0 }}'
      - condition: state
        entity_id: media_player.yamaha_receiver
        state: 'on'
    action:
      - service: script.turn_on
        entity_id: script.ht_volume_down
  - alias: mute volume with cube
    trigger:
      platform: event
      event_type: deconz_event
      event_data:
        entity: lumi_sensor_cube_20
        event: 7007
    condition:
      condition: state
      entity_id: media_player.yamaha_receiver
      state: 'on'
    action:
      - service: script.turn_on
        entity_id: script.ht_volume_mute

switch:
  - platform: wake_on_lan
    name: steambox
    host: 192.168.1.70
    mac_address: 'd8:cb:8a:35:32:af'
    broadcast_address: 192.168.1.255
    turn_off:
      service: rest_command.steambox
      data_template:
        command: 'shutdown'
  - platform: template
    switches:
      projector:
        value_template: '{{ states.binary_sensor.projector.state }}'
        turn_on:
          service: script.turn_on
          entity_id: script.projo_on
        turn_off:
          service: script.turn_on
          entity_id: script.projo_off

rest_command:
  # Custom device: https://github.com/reefab/Projo to control a serial connected
  # projector with a REST interface over wifi
  projo:
    url: 'http://192.168.1.44/cgi-bin/luci/projo/{{ resource }}/{{ command }}'
    method: 'POST'
    # "3D SBS" = "POST /cgi-bin/luci/projo/3d/sbs\n";
    # "CURSOR LEFT" = "POST /cgi-bin/luci/projo/menu/left\n";
    # "CURSOR DOWN" = "POST /cgi-bin/luci/projo/menu/down\n";
    # "CURSOR ENTER" = "POST /cgi-bin/luci/projo/menu/enter\n";
    # "3D OFF" = "POST /cgi-bin/luci/projo/3d/off\n";
    # "MENU OFF" = "POST /cgi-bin/luci/projo/menu/off\n";
    # "BLANK OFF" = "POST /cgi-bin/luci/projo/blank/off\n";
    # "POWER ON" = "POST /cgi-bin/luci/projo/power/on\n";
    # "MENU ON" = "POST /cgi-bin/luci/projo/menu/on\n";
    # "CURSOR UP" = "POST /cgi-bin/luci/projo/menu/up\n";
    # "POWER OFF" = "POST /cgi-bin/luci/projo/power/off\n";
    # "CURSOR RIGHT" = "POST /cgi-bin/luci/projo/menu/right\n";
    # "3D FS" = "POST /cgi-bin/luci/projo/3d/fs\n";
    # "3D TB" = "POST /cgi-bin/luci/projo/3d/tb\n";
    # "BLANK ON" = "POST /cgi-bin/luci/projo/blank/on\n";
  steambox:
    # Small windows software to shut it down remotely
    url: 'http://192.168.1.70:5001/{{ command }}'
  screenbloom:
    # http://www.screenbloom.com
    url: 'http://192.168.1.70:5000/{{ command }}'


binary_sensor:
  - platform: rest
    resource: http://192.168.1.44/cgi-bin/luci/projo/power/
    name: projector
    value_template: '{{value_json.status}}'
  - platform: ping
    host: 192.168.1.70
    name: Steambox
    count: 2
    scan_interval: 30

media_player:
  - platform: yamaha
    host: 192.168.1.103
  - platform: universal
    name: Ã‰cran salon
    children:
      - media_player.yamaha_receiver
    # state_template: '{{ states.media_player.yamah_receiver.state }}'
    commands:
      turn_on:
        service: script.turn_on
        data:
          entity_id: script.projo_on
      turn_off:
        service: script.turn_on
        data:
          entity_id: script.projo_off
      volume_up:
        service: script.turn_on
        data:
          entity_id: script.ht_volume_up
      volume_down:
        service: script.turn_on
        data:
          entity_id: script.ht_volume_down
      volume_mute:
        service: script.turn_on
        data:
          entity_id: script.ht_volume_mute
      volume_set:
        service: media_player.volume_set
        data_template:
          entity_id: media_player.yamaha_receiver
          volume_level: '{{ volume_level }}'
      select_source:
        service: media_player.select_source
        data_template:
          entity_id: media_player.yamaha_receiver
          source: '{{ source }}'
    attributes:
      state: media_player.yamaha_receiver
      is_volume_muted: media_player.yamaha_receiver|is_volume_muted
      volume_level: media_player.yamaha_receiver|volume_level
      source: media_player.yamaha_receiver|source
      source_list: media_player.yamaha_receiver|source_list

script:
  projo_on:
    alias: Projo On
    sequence:
      - service: switch.turn_off
        entity_id: switch.circadian_lighting_circadian_lighting
      - service: light.turn_off
        entity_id: light.bureau
      - service: light.turn_off
        entity_id: light.projo
      - service: light.turn_on
        entity_id: light.ecran
        data:
          brightness: 150
          transition: 60
      - service: switch.turn_on
        entity_id: switch.steambox
      - service: rest_command.projo
        data_template:
          resource: 'power'
          command: 'on'
      - service: media_player.turn_on
        entity_id: media_player.yamaha_receiver
      - service: media_player.select_source
        entity_id: media_player.yamaha_receiver
        data:
          source: 'HDMI2'
      - service: light.turn_on
        entity_id: light.projo
        data:
          brightness: 0
          transition: 60
      - delay: '00:01:00'
      - service: rest_command.screenbloom
        data_template:
          command: 'start'
      - service: light.turn_off
        entity_id: light.projo

  projo_off:
    alias: Projo Off
    sequence:
      - service: rest_command.screenbloom
        data_template:
          command: 'stop'
      - service: rest_command.projo
        data_template:
          resource: 'power'
          command: 'off'
      - service: media_player.turn_off
        entity_id: media_player.yamaha_receiver
      - service: switch.turn_off
        entity_id: switch.steambox
      - service: switch.turn_on
        entity_id: switch.circadian_lighting_circadian_lighting
      - condition: state
        entity_id: sun.sun
        state: 'above_horizon'
      - service: light.turn_off
        entity_id: light.ecran

  ht_volume_up:
    alias: Volume Up
    sequence:
      - service: media_player.volume_set
        entity_id: media_player.yamaha_receiver
        data_template:
          volume_level: '{{ states.media_player.yamaha_receiver.attributes.volume_level + 0.01 }}'

  ht_volume_down:
    alias: Volume Down
    sequence:
      - service: media_player.volume_set
        entity_id: media_player.yamaha_receiver
        data_template:
          volume_level: '{{ states.media_player.yamaha_receiver.attributes.volume_level - 0.01 }}'

  ht_volume_mute:
    alias: Volume Mute
    sequence:
      - service: media_player.volume_mute
        entity_id: media_player.yamaha_receiver
        data:
          is_volume_muted: true

  blank_projector:
    alias: Blank the projector display
    sequence:
      - service: rest_command.projo
        data_template:
          resource: 'blank'
          command: 'on'

  restore_projector:
    alias: Restore the projector display
    sequence:
      - service: rest_command.projo
        data_template:
          resource: 'blank'
          command: 'off'

homeassistant:
  customize:
    switch.steambox:
      icon: 'mdi:steam'
    switch.steambox_wol:
      hidden: true
    script.projo_on:
      hidden: true
    script.projo_off:
      hidden: true
    script.blank_projector:
      icon: 'mdi:flashlight-off'
    script.un-blank_projector:
      icon: 'mdi:flashlight-on'
    switch.projector:
      friendly-name: Projo
      icon: 'mdi:projector'
    binary_sensor.projector:
      hidden: true
    media_player.yamaha_receiver:
      hidden: true
  customize_glob:
    "automation.*with_cube":
      hidden: true
